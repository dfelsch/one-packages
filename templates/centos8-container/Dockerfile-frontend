# ---------------------------------------------------------------------------- #
# Copyright 2020, OpenNebula Project, OpenNebula Systems                       #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
# ---------------------------------------------------------------------------- #

ARG CENTOS_VERSION=8
FROM centos:${CENTOS_VERSION}
LABEL version="1.0" \
    maintainer="Petr OspalÃ½ (pospaly@opennebula.io)" \
    description="ONE Docker - Dockerized OpenNebula"

#
# BUILD ARGS
#

ARG CENTOS_VERSION
ARG OPENNEBULA_VERSION="5.12"
ARG OPENNEBULA_URL_REPO="https://downloads.opennebula.io/repo/${OPENNEBULA_VERSION}/CentOS/\$releasever/\$basearch"
ARG OPENNEBULA_URL_GPGKEY="https://downloads.opennebula.io/repo/repo.key"
# TODO: ARG DOCKER_VERSION=19.03

#
# PACKAGES
#

# basic packages (and remove kdump)
RUN dnf -y remove kexec-tools && dnf -y update && dnf -y install \
        epel-release \
        yum-utils \
    && dnf clean all && rm -rf /var/cache/dnf/*

# prepare opennebula repo
RUN { \
        echo "[opennebula]" ; \
        echo "name=opennebula" ; \
        echo "enabled=1" ; \
        echo "baseurl=${OPENNEBULA_URL_REPO}" ; \
        if [ -n "${OPENNEBULA_URL_GPGKEY}" ] ; then \
            echo "gpgkey=${OPENNEBULA_URL_GPGKEY}" ; \
            echo "gpgcheck=1" ; \
            echo "repo_gpgcheck=1" ; \
        fi \
    } >> /etc/yum.repos.d/opennebula.repo
RUN chown root:root /etc/yum.repos.d/opennebula.repo
RUN chmod 0644 /etc/yum.repos.d/opennebula.repo
RUN sed -i "s/[\$][{]OPENNEBULA_VERSION[}]/${OPENNEBULA_VERSION}/" \
        /etc/yum.repos.d/opennebula.repo

# prepare docker repo
RUN yum-config-manager --add-repo \
        https://download.docker.com/linux/centos/docker-ce.repo

# prepare phusion passenger repo
RUN curl --fail -sSLo /etc/yum.repos.d/passenger.repo \
        https://oss-binaries.phusionpassenger.com/yum/definitions/el-passenger.repo

# opennebula packages and dependencies
RUN dnf -y install \
        supervisor \
        mariadb \
        docker-ce-cli \
        memcached \
        httpd \
        passenger \
        mod_passenger \
        opennebula-server \
        opennebula-ruby \
        opennebula-flow \
        opennebula-gate \
        opennebula-sunstone \
        file \
        e2fsprogs \
        nc \
    && dnf clean all && rm -rf /var/cache/dnf/*

#
# CONFIGURATION
#

# each container should have unique machine-id (autogenerated on start)
RUN rm -f /etc/machine-id

# cleanup supervisord's config files
RUN rm -rf /etc/supervisord.* && mkdir -p /etc/supervisord.d

# TODO: remove this when supervisord becomes part of one repo
# copy supervised service files
COPY supervisord /usr/share/one/supervisord
RUN chown -R root:root /usr/share/one/supervisord
RUN chmod 0755 /usr/share/one/supervisord
RUN chmod 0755 /usr/share/one/supervisord/service
RUN chmod 0755 /usr/share/one/supervisord/supervisord.d
RUN chmod 0644 /usr/share/one/supervisord/supervisord.conf
RUN chmod 0600 /usr/share/one/supervisord/supervisord.d/*.ini
RUN chmod 0755 /usr/share/one/supervisord/service/*.sh

# cleanup the oneadmin's ssh
RUN for f in authorized_keys id_rsa id_rsa.pub ; do rm -f "/var/lib/one/.ssh/${f}" ; done

# configure sshd
RUN sed -i \
        -e '/PermitRootLogin/d' \
        -e '/PasswordAuthentication/d' \
        -e '/PermitEmptyPasswords/d' \
        -e '/PubkeyAuthentication/d' \
        /etc/ssh/sshd_config \
    && { \
        echo 'PermitRootLogin no' ; \
        echo 'PasswordAuthentication no' ; \
        echo 'PermitEmptyPasswords no' ; \
        echo 'PubkeyAuthentication yes' ; \
    } >> /etc/ssh/sshd_config

# cleanup the ssh host keys if present
RUN rm -f /etc/ssh/ssh_host_*

# create oneadmin's "root" directory for its volumes
RUN mkdir -p /oneadmin \
    && chown root:root /oneadmin \
    && chmod 0755 /oneadmin

# apache config
COPY conf/httpd.conf /etc/httpd/conf/httpd.conf
RUN chown root:root /etc/httpd/conf/httpd.conf
RUN chmod 644 /etc/httpd/conf/httpd.conf
COPY conf/opennebula-httpd.conf /etc/httpd/conf.d/opennebula.conf
RUN chown root:root /etc/httpd/conf.d/opennebula.conf
RUN chmod 644 /etc/httpd/conf.d/opennebula.conf
RUN rm -f /etc/httpd/conf.d/welcome.conf

# memcached config
COPY conf/memcached.conf /etc/sysconfig/memcached
RUN chown root:root /etc/sysconfig/memcached
RUN chmod 644 /etc/sysconfig/memcached

# passenger config
# TODO: is this needed?
RUN ln -s /usr/share/ruby/vendor_ruby/phusion_passenger \
        /usr/share/passenger/phusion_passenger

# permission settings according to:
# https://docs.opennebula.io/stable/deployment/sunstone_setup/suns_advance.html
RUN chmod a+x /var/lib/one
RUN chmod a+x /var/lib/one/sunstone

#
# CLEANUP
#

# NOTE:
# This has meaning only when the built image is squashed or obfuscated (as we
# do here via the two-stage build) - otherwise it will just hide these deleted
# files in the top layer but they are still easily retrievable!

RUN rm -f /etc/yum.repos.d/opennebula.repo

#
# HEALTHCHECK
#

COPY onedocker-healthcheck.sh /
RUN chown root:root /onedocker-healthcheck.sh
RUN chmod 0755 /onedocker-healthcheck.sh

HEALTHCHECK --start-period=2m --interval=10s --retries=3 --timeout=10s \
    CMD [ "/onedocker-healthcheck.sh" ]

#
# ENTRYPOINT
#

# onedocker script which is doing the heavy-lifting
COPY onedocker-frontend.sh /
RUN chown root:root /onedocker-frontend.sh
RUN chmod 0755 /onedocker-frontend.sh

ENTRYPOINT [ "/onedocker-frontend.sh" ]

# our entrypoint does not parse arguments
#CMD [ "NO-EFFECT" ]

#
# PUBLISHED SERVICES
#

EXPOSE 9869/tcp
EXPOSE 2633/tcp
EXPOSE 2474/tcp
EXPOSE 5030/tcp
EXPOSE 29876/tcp

