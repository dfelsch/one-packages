ARG CENTOS_VERSION=8
FROM centos:${CENTOS_VERSION}

#
# BUILD ARGS
#

ARG IMAGE_VERSION=1.0
ARG OPENNEBULA_LICENSE
ARG CENTOS_VERSION
ARG OPENNEBULA_VERSION="5.13"
ARG OPENNEBULA_URL_REPO="https://downloads.opennebula.io/repo/${OPENNEBULA_VERSION}/CentOS/\$releasever/\$basearch"
ARG OPENNEBULA_URL_GPGKEY="https://downloads.opennebula.io/repo/repo.key"
# TODO: ARG DOCKER_VERSION=19.03

#
# LABELS
#

LABEL version="${IMAGE_VERSION}"
LABEL maintainer="OpenNebula Team (contact@opennebula.io)"
LABEL description="OpenNebula Front-end"
LABEL org.label-schema.name="opennebula-frontend"
LABEL org.label-schema.description="OpenNebula Front-end"
LABEL org.label-schema.version="${IMAGE_VERSION}"
LABEL org.label-schema.license="${OPENNEBULA_LICENSE}"
LABEL org.label-schema.vendor="OpenNebula Systems"
LABEL org.opencontainers.image.title="opennebula-frontend"
LABEL org.opencontainers.image.description="OpenNebula Front-end"
LABEL org.opencontainers.image.version="${IMAGE_VERSION}"
LABEL org.opencontainers.image.authors="OpenNebula Team (contact@opennebula.io)"
LABEL org.opencontainers.image.licenses="${OPENNEBULA_LICENSE}"
LABEL org.opencontainers.image.vendor="OpenNebula Systems"

# image params

LABEL org.label-schema.docker.params="OPENNEBULA_FRONTEND_SERVICE=Frontend service to run (or all), \
OPENNEBULA_FRONTEND_HOST=Host which will be advertised as the frontend endpoint, \
OPENNEBULA_FRONTEND_SSH_HOST=Advertised host to which node will ssh into, \
ONED_HOST=Host of the oned server, \
ONEFLOW_HOST=Host of the oneflow server, \
ONEGATE_HOST=Host of the onegate server, \
ONEGATE_PORT=Advertised port of the onegate server, \
MEMCACHED_HOST=Host of the memcached server, \
GUACD_HOST=Host of the guacd server, \
SUNSTONE_PORT=Advertised HTTP port for the sunstone server, \
SUNSTONE_TLS_PORT=Advertised HTTPS port for the sunstone server, \
SUNSTONE_HTTPS_ENABLED=yes/no if HTTPS should be enabled at all, \
SUNSTONE_VNC_PORT=Port of the VNC server, \
FIREEDGE_HOST=Host of the fireedge server, \
TLS_PROXY_ENABLED=yes/no if TLS proxy (stunnel) should be running, \
TLS_DOMAIN_LIST=Space separated list of DNS names (asterisk allowed), \
TLS_VALID_DAYS=Expiration days for the generated self-signed certificate, \
TLS_CERT_BASE64=Custom certificate in base64 format, \
TLS_KEY_BASE64=Privkey to the custom certificate in base64 format, \
TLS_CERT=Custom certificate as a filename, \
TLS_KEY=Privkey to the custom certificate as a filename, \
ONEADMIN_PASSWORD=Password for the oneadmin user (otherwise generated), \
ONEADMIN_SSH_PRIVKEY=Privkey of the custom ssh key as a filename, \
ONEADMIN_SSH_PUBKEY=Pubkey of the custom ssh key as a filename, \
DOCKER_ENABLED=yes/no if docker service should be running, \
DOCKER_TCP_ENABLED=yes/no if docker should listen on tcp, \
DOCKER_HOST=Host of the docker server, \
DOCKER_SOCKET=Filepath to the docker socket, \
MYSQL_HOST=Host of the mysql server, \
MYSQL_PORT=Port of the mysql server, \
MYSQL_DATABASE=Database name for the OpenNebula database, \
MYSQL_USER=Database user for the OpenNebula database, \
MYSQL_PASSWORD=Password of the OpenNebula database user, \
MYSQL_ROOT_PASSWORD=Root password of the mysql server"

#
# PACKAGES
#

# basic packages (and remove kdump)
RUN dnf -y remove kexec-tools && dnf -y update && dnf -y install \
        epel-release \
        yum-utils \
    && dnf clean all && rm -rf /var/cache/dnf/*

# prepare opennebula repo
RUN { \
        echo "[opennebula]" ; \
        echo "name=opennebula" ; \
        echo "enabled=1" ; \
        echo "baseurl=${OPENNEBULA_URL_REPO}" ; \
        if [ -n "${OPENNEBULA_URL_GPGKEY}" ] ; then \
            echo "gpgkey=${OPENNEBULA_URL_GPGKEY}" ; \
            echo "gpgcheck=1" ; \
            echo "repo_gpgcheck=1" ; \
        fi \
    } >> /etc/yum.repos.d/opennebula.repo
RUN chown root:root /etc/yum.repos.d/opennebula.repo
RUN chmod 0644 /etc/yum.repos.d/opennebula.repo
RUN sed -i "s/[\$][{]OPENNEBULA_VERSION[}]/${OPENNEBULA_VERSION}/" \
        /etc/yum.repos.d/opennebula.repo

# prepare docker repo
RUN yum-config-manager --add-repo \
        https://download.docker.com/linux/centos/docker-ce.repo

# prepare phusion passenger repo
RUN curl --fail -sSLo /etc/yum.repos.d/passenger.repo \
        https://oss-binaries.phusionpassenger.com/yum/definitions/el-passenger.repo

# opennebula packages and dependencies
RUN dnf -y install \
        crontabs \
        logrotate \
        supervisor \
        mariadb \
        mariadb-server \
        expect \
        augeas \
        docker-ce \
        docker-ce-cli \
        containerd.io \
        memcached \
        httpd \
        mod_ssl \
        passenger \
        mod_passenger \
        stunnel \
        fuse \
        opennebula-server \
        opennebula-ruby \
        opennebula-flow \
        opennebula-gate \
        opennebula-sunstone \
        opennebula-fireedge \
        opennebula-guacd \
        file \
        e2fsprogs \
        nc \
    && dnf clean all && rm -rf /var/cache/dnf/*

#
# CONFIGURATION
#

# each container should have unique machine-id (autogenerated on start)
RUN rm -f /etc/machine-id

# cleanup supervisord's config files
RUN rm -rf /etc/supervisord.* && mkdir -p /etc/supervisord.d

# create supervisord logdir
RUN mkdir -p /var/log/supervisor/services

# create config location for our supervisor services
RUN mkdir -p /etc/default/supervisor

# copy supervisord config
COPY conf/supervisord.conf /usr/share/one/supervisor/supervisord.conf
RUN chown root:root /usr/share/one/supervisor/supervisord.conf
RUN chmod 0644 /usr/share/one/supervisor/supervisord.conf

# cleanup the oneadmin's ssh
RUN for f in authorized_keys id_rsa id_rsa.pub ; do rm -f "/var/lib/one/.ssh/${f}" ; done

# remove all autogenerated oneadmin's tokens
RUN rm -rf /var/lib/one/.one/*

# configure sshd
RUN sed -i \
        -e '/PermitRootLogin/d' \
        -e '/PasswordAuthentication/d' \
        -e '/PermitEmptyPasswords/d' \
        -e '/PubkeyAuthentication/d' \
        /etc/ssh/sshd_config \
    && { \
        echo '# OpenNebula Container Build #'; \
        echo 'PermitRootLogin no' ; \
        echo 'PasswordAuthentication no' ; \
        echo 'PermitEmptyPasswords no' ; \
        echo 'PubkeyAuthentication yes' ; \
        echo '# OpenNebula Container Build #'; \
    } >> /etc/ssh/sshd_config

# cleanup the ssh host keys if present
RUN rm -f /etc/ssh/ssh_host_*

# apache config
COPY conf/httpd.conf /etc/httpd/conf/httpd.conf
RUN chown root:root /etc/httpd/conf/httpd.conf
RUN chmod 644 /etc/httpd/conf/httpd.conf
COPY conf/opennebula-http.conf /etc/httpd/conf.d/opennebula-http.conf-disabled
COPY conf/opennebula-https.conf /etc/httpd/conf.d/opennebula-https.conf-disabled
RUN chown root:root /etc/httpd/conf.d/opennebula-http*.conf-disabled
RUN chmod 644 /etc/httpd/conf.d/opennebula-http*.conf-disabled
RUN rm -f /etc/httpd/conf.d/welcome.conf
RUN rm -f /etc/httpd/conf.d/ssl.conf

# memcached config
COPY conf/memcached.conf /etc/sysconfig/memcached
RUN chown root:root /etc/sysconfig/memcached
RUN chmod 644 /etc/sysconfig/memcached

# passenger config
# TODO: is this needed?
RUN ln -s /usr/share/ruby/vendor_ruby/phusion_passenger \
        /usr/share/passenger/phusion_passenger

# stunnel config
RUN rm -rf /etc/stunnel/* && mkdir -p /etc/stunnel/conf.d
COPY conf/stunnel.conf /etc/stunnel/stunnel.conf
RUN chown -R root:root /etc/stunnel
RUN chmod 0644 /etc/stunnel/stunnel.conf

# permission settings according to:
# https://docs.opennebula.io/stable/deployment/sunstone_setup/suns_advance.html
RUN chmod a+x /var/lib/one
RUN chmod a+x /var/lib/one/sunstone

# create opennebula's volume directories
RUN mkdir -p \
        /srv/one \
        /srv/one/secret-tls \
        /srv/one/secret-ssh-host-keys \
    && chown root:root /srv/one /srv/one/* \
    && chmod 0755 /srv/one /srv/one/*

# create oneadmin's volume directories
RUN mkdir -p \
        /var/lib/one/.one \
        /var/lib/one/.ssh \
        /var/lib/one/.ssh-copyback \
    && chown oneadmin:oneadmin /var/lib/one/.one /var/lib/one/.ssh* \
    && chmod 0700 /var/lib/one/.one /var/lib/one/.ssh*

# move aside conflicting logrotate files so they can be explicitly enabled
RUN mkdir -p /etc/logrotate.one \
    && mv /etc/logrotate.d/opennebula* /etc/logrotate.one/

#
# CLEANUP
#

# NOTE:
# This has meaning only when the built image is squashed or obfuscated (if we
# use a two-stage build) - otherwise it will just hide these deleted files in
# the top layer but they are still easily retrievable!

RUN rm -rf \
        /etc/yum.repos.d/opennebula.repo \
        /var/log/dnf* \
        /var/log/anaconda \
        /var/log/hawkey.log
RUN find \
        /tmp \
        /var/tmp \
        /run \
        -mindepth 1 -maxdepth 1 -exec rm -rf '{}' \;
RUN truncate -c -s 0 \
        /var/log/wtmp \
        /var/log/btmp \
        /var/log/lastlog

#
# VOLUMES
#

# implicit anonymous volumes for persistent data

VOLUME ["/var/log"]
VOLUME ["/var/log/one"]
VOLUME ["/var/lib/mysql"]
VOLUME ["/var/lib/one/.one"]
VOLUME ["/var/lib/one/.ssh"]
VOLUME ["/var/lib/one/datastores"]
VOLUME ["/srv/one/secret-tls"]
VOLUME ["/srv/one/secret-ssh-host-keys"]

#
# HEALTHCHECK
#

COPY scripts/frontend-healthcheck.sh /
RUN chown root:root /frontend-healthcheck.sh
RUN chmod 0755 /frontend-healthcheck.sh

# this is a docker extension and it is not part of OCI definition - logic is
# moved to the docker-compose file now
#HEALTHCHECK --start-period=2m --interval=10s --retries=3 --timeout=10s \
#    CMD [ "/frontend-healthcheck.sh" ]

#
# ENTRYPOINT
#

# onedocker script which is doing the heavy-lifting
COPY scripts/frontend-bootstrap.sh /
RUN chown root:root /frontend-bootstrap.sh
RUN chmod 0755 /frontend-bootstrap.sh

ENTRYPOINT [ "/frontend-bootstrap.sh" ]

# our entrypoint does not parse arguments
#CMD [ "NO-EFFECT" ]

#
# PUBLISHABLE SERVICES
#

# commented out ports are those which are used in the container but not desired
# to be exposed...

# sshd:
EXPOSE 22/tcp

# mysql:
#EXPOSE 3306/tcp

# sunstone:
EXPOSE 80/tcp
EXPOSE 443/tcp

# oned:
EXPOSE 2633/tcp
EXPOSE 2634/tcp

# oneflow:
EXPOSE 2474/tcp
EXPOSE 2475/tcp

# onegate:
EXPOSE 5030/tcp
EXPOSE 5031/tcp

# memcached:
#EXPOSE 11211/tcp

# novnc:
EXPOSE 29876/tcp

# fireedge:
#EXPOSE 2616/tcp

# guacd:
#EXPOSE 4822/tcp

# docker daemon
#EXPOSE 2375/tcp
#EXPOSE 2376/tcp

